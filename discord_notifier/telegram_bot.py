import locale

import logging

import aiogram
from aiogram.utils.markdown import text, bold, italic
import discord

from .config import Config
from .discord_client import Client
from secret_key import *

logging.basicConfig(level=logging.DEBUG)

try:
    locale.setlocale(locale.LC_ALL, "ru_RU.UTF-8")
except locale.Error:
    pass

config = Config()
bot = aiogram.Bot(secret_key)
disp = aiogram.Dispatcher(bot)


async def on_message(message):
    await bot.send_message(
        chat_id, text(
            bold(config["target nick"]),
            " | ",
            message.guild.name,
            italic("#" + message.channel.name),
            " | üïê ",
            message.created_at.strftime("%H:%M, %d %b %Y"),
            "\n\n",
            message.content
        ),
        parse_mode=aiogram.types.ParseMode.MARKDOWN
    )


client = Client(config, on_message)


@disp.message_handler(commands=["start"])
async def start(message):
    global chat_id
    chat_id = message.chat.id

    ready = True

    if "token" not in config:
        await bot.send_message(
            message.chat.id,
            f"""–ü—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à —Ç. –Ω. \"—Ç–æ–∫–µ–Ω\" –¥–ª—è —Ä–∞–±–æ—Ç—ã.
            
  1. –û—Ç–∫—Ä–æ–π—Ç–µ Discord –Ω–∞ –ü–ö.
  2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏.
  3. –ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+I.
  4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É {italic('Network')} –∏ –Ω–∞–∂–º–∏—Ç–µ F5. Discord –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è.
  5. –í–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–ª–µ {italic('Filter')} –∑–∞–ø—Ä–æ—Å "/api/v6". –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É {italic('messages')} –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë.
  6. –í —Ä–∞–∑–¥–µ–ª–µ {italic('Request headers')} –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ {bold('authorization')}. 
     –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ {bold('authorization: ')}.
  7. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ "/token {italic('—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ')}".""",
            parse_mode=aiogram.types.ParseMode.MARKDOWN
        )
        ready = False
    if "target nick" not in config:
        await bot.send_message(
            message.chat.id,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π \"/target {italic('–∏–º—è')}\".",
            parse_mode=aiogram.types.ParseMode.MARKDOWN
        )
        ready = False

    if not ready:
        await bot.send_message(message.chat.id, "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return

    try:
        await bot.send_message(message.chat.id, "\U0001F7E2 –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ.")
        await client.start(config["token"], bot=False)
    except RuntimeError:
        await bot.send_message(message.chat.id, "\u2139 –ù–∞–±–ª—é–¥–µ–Ω–∏–µ —É–∂–µ –≤–µ–¥–µ—Ç—Å—è.")
    except discord.LoginFailure:
        await bot.send_message(
            message.chat.id,
            "\u26A0 –ë—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /token –µ—â—ë —Ä–∞–∑."
        )
        del config["token"]
    except discord.GatewayNotFound:
        await bot.send_message(
            message.chat.id,
            "\u26A0 –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Discord. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n\n"
            "https://status.discordapp.com/ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Discord"
        )


@disp.message_handler(commands=["stop"])
async def stop(message):
    await client.close()
    await bot.send_message(message.chat.id, "\U0001F534 –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


@disp.message_handler(commands=["token"])
async def token_handler(message):
    config["token"] = message.text.split()[1]
    await bot.send_message(message.chat.id, "\u2705 –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


@disp.message_handler(commands=["target"])
async def nickname_handler(message):
    config["target nick"] = ' '.join(message.text.split()[1:]).strip()
    await bot.send_message(message.chat.id, "\u2705 –ò–º—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


@disp.message_handler(commands=["status"])
async def status(message):
    if client.running:
        await bot.send_message(
            message.chat.id,
            f"\U0001F7E2 –ù–∞–±–ª—é–¥–µ–Ω–∏–µ {bold('–≤–µ–¥–µ—Ç—Å—è')}.",
            parse_mode=aiogram.types.ParseMode.MARKDOWN)
    else:
        await bot.send_message(
            message.chat.id,
            f"\U0001F534 –ù–∞–±–ª—é–¥–µ–Ω–∏–µ {bold('–Ω–µ –≤–µ–¥–µ—Ç—Å—è')}.",
            parse_mode=aiogram.types.ParseMode.MARKDOWN
        )


@disp.message_handler(commands=["showconfig"])
async def show_config(message):
    await bot.send_message(
        message.chat.id,
        bold('–¢–æ–∫–µ–Ω: ') + (config.get("token", bold('–Ω–µ –∑–∞–¥–∞–Ω'))) + "\n"
        + bold('–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ') + (config.get("target nick", bold('–Ω–µ –∑–∞–¥–∞–Ω'))),
        parse_mode=aiogram.types.ParseMode.MARKDOWN
    )


@disp.message_handler(commands=["help"])
async def bot_help(message):
    await bot.send_message(
        message.chat.id,
        f"""–ö–æ–º–∞–Ω–¥—ã:
/start: –Ω–∞—á–∞—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
/stop: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
/status: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–¥–µ—Ç –ª–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
/token {italic('—Ç–æ–∫–µ–Ω')}: –∑–∞–¥–∞—Ç—å —Ç–æ–∫–µ–Ω
/target {italic('–∏–º—è')}: –∑–∞–¥–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/showconfig: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏""",
        parse_mode=aiogram.types.ParseMode.MARKDOWN
    )


aiogram.executor.start_polling(disp)
